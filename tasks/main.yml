---
- name: Obtain information from registry for site check
  win_reg_stat:
    path: HKLM:\Software\GO-EUC\Citrix
    name: ddc_version
  register: citrix.version

- name: Block for Citrix installation
  block:

    - name: Install NuGet
      win_shell: Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force

    - name: Check for PendingReboot module
      win_psmodule:
        name: PendingReboot
        state: present
        accept_license: true
      retries: 3
      delay: 10
      register: result
      until: result is not failed

    - name: Install Citrix Delivery Controller prerequisites
      win_feature:
        name: '{{ item }}'
        state: present
      with_items: '{{ citrix.ddc.prereqs }}'

    - name: Reboot machine for Windows Features
      ansible.windows.win_reboot:

    - name: Create Log Folder
      win_file:
        path: '{{ directory_logging }}'
        state: directory

    - name: Create Download Folder
      win_file:
        path: C:\Download
        state: directory

    - name: Create Citrix Download Folder
      win_file:
        path: C:\Download\Citrix
        state: directory

    - name: Check if Citrix ISO is downloaded yet
      win_stat:
        path: "C:\\Download\\Citrix\\{{citrix.source}}"
      register: citrix_iso

    - name: Download Citrix ISO
      win_get_url:
        url: "{{citrix.path}}/{{citrix.version}}/{{citrix.source}}"
        dest: "C:\\Download\\Citrix\\{{citrix.source}}"
      when: citrix_iso.stat.exists == false

    - name: Register iso path
      set_fact:
        iso_path: "C:\\Download\\Citrix\\{{citrix.source}}"

    - name: Check for pending reboot
      win_shell: (Test-PendingReboot -SkipConfigurationManagerClientCheck).IsRebootPending
      register: pending_reboot

    - name: Set fact for pending reboot
      set_fact:
        pending_reboot: "{{ pending_reboot.stdout | trim | lower}}"

    - name: Reboot to remove the pending reboot
      ansible.windows.win_reboot:
      when: pending_reboot == true

    - name: Mount the Citrix installation ISO
      win_disk_image:
        image_path: "{{ iso_path }}"
        state: present
      register: disk_image_out

    - name: Install Citrix Delivery Controller role
      win_package:
        path: "{{ disk_image_out.mount_paths[0] }}\\x64\\XenDesktop Setup\\XenDesktopServerSetup.exe"
        arguments: "{{ citrix.ddc.params_full }}"
        state: present
        expected_return_code: [0, 3, 3010]
      register: citrix_installation

    - name: Unmount the Citrix installation ISO
      win_disk_image:
        image_path: "{{ iso_path }}"
        state: absent
      register: disk_image_out

    - name: Reboot to complete Citrix Delivery Controller installation
      ansible.windows.win_reboot:
      when: citrix_installation.reboot_required == true

    - name: Check for pending reboot
      win_shell: (Test-PendingReboot -SkipConfigurationManagerClientCheck).IsRebootPending
      register: pending_reboot

    - name: Set fact for pending reboot
      set_fact:
        pending_reboot: "{{ pending_reboot.stdout | trim | lower}}"

    - name: Reboot to remove the pending reboot
      ansible.windows.win_reboot:
      when: pending_reboot == true

    - name: Remove Citrix Delivery Controller RunOnce key from registry
      win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce
        name: "!XenDesktopSetup"
        state: absent
      register: install_resume

    - name: Mount the Citrix installation ISO
      win_disk_image:
        image_path: "{{ iso_path }}"
        state: present
      register: disk_image_out

    - name: Resume the Citrix Delivery Controller installation
      win_package:
        path: C:\ProgramData\Citrix\XenDesktopSetup\XenDesktopServerSetup.exe
        arguments: "{{ citrix.ddc.params_full }}"
        state: present
        expected_return_code: [0, 3, 3010]
      when: install_resume.changed

    - name: Unmount the Citrix installation ISO
      win_disk_image:
        image_path: "{{ iso_path }}"
        state: present
      register: disk_image_out

    - name: Check for pending reboot
      win_shell: (Test-PendingReboot -SkipConfigurationManagerClientCheck).IsRebootPending
      register: pending_reboot

    - name: Set fact for pending reboot
      set_fact:
        pending_reboot: "{{ pending_reboot.stdout | trim | lower}}"

    - name: Reboot to remove the pending reboot
      ansible.windows.win_reboot:
      when: pending_reboot == true

    - name: Add registry for future installation check
      win_regedit:
        path: HKLM:\Software\GO-EUC\Citrix
        name: ddc_version
        data: "{{ citrix.version }}"
        type: string

  when: (citrix.version.exists == false) or (citrix.version.value != citrix.version)